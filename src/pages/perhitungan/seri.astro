---
import BaseLayout from '../../layouts/BaseLayout.astro';
import PerhitunganVPSeri from '../../components/PerhitunganVPSeri.jsx';
import { contohPerhitunganVPDenganSeri, contohPerhitunganVPDenganTiebreaker } from '../../utils/hitungSkor';

const judulHalaman = "Penanganan Seri dalam Perhitungan VP";
---

<BaseLayout title={judulHalaman}>
  <div class="max-w-6xl mx-auto">
    <div class="bg-white p-6 rounded-lg shadow mb-8">
      <h2 class="text-2xl font-bold mb-4">Perhitungan Victory Points: Kasus Seri (Tie)</h2>
      
      <p class="mb-4">
        Dalam kompetisi debat, sering terjadi situasi di mana dua atau lebih tim memiliki skor tim yang sama (seri). Ada beberapa metode yang digunakan untuk menangani kasus seri ini dalam perhitungan Victory Points (VP).
      </p>
      
      <h3 class="text-xl font-semibold mb-2">Metode Penanganan Seri</h3>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        <div class="bg-purple-50 p-4 rounded-lg border border-purple-200">
          <h4 class="font-bold text-purple-800 mb-2">1. Metode Split VP (Pembagian Rata)</h4>
          <p class="mb-3">
            Dengan metode ini, tim yang memiliki skor sama akan berbagi peringkat dan mendapatkan rata-rata VP dari peringkat tersebut.
          </p>
          <div class="bg-white p-3 rounded border">
            <p class="font-medium mb-1">Contoh:</p>
            <ul class="list-disc pl-5 space-y-1 text-sm">
              <li>Tim A dan Tim B memiliki skor tim yang sama (76.0).</li>
              <li>Mereka berbagi peringkat 1-2.</li>
              <li>VP untuk peringkat 1 = 3, VP untuk peringkat 2 = 2.</li>
              <li>Masing-masing tim mendapat VP = (3 + 2) / 2 = 2.5</li>
            </ul>
          </div>
        </div>
        
        <div class="bg-blue-50 p-4 rounded-lg border border-blue-200">
          <h4 class="font-bold text-blue-800 mb-2">2. Metode Tie-breaker (Pemecah Seri)</h4>
          <p class="mb-3">
            Dengan metode ini, digunakan kriteria tambahan untuk memecah seri dan menentukan peringkat.
          </p>
          <div class="bg-white p-3 rounded border">
            <p class="font-medium mb-1">Beberapa jenis tie-breaker:</p>
            <ul class="list-disc pl-5 space-y-1 text-sm">
              <li><strong>Skor Pembicara Tertinggi</strong> - Tim dengan pembicara skor tertinggi menang.</li>
              <li><strong>Total Skor Pembicara</strong> - Menjumlahkan semua skor pembicara tim.</li>
              <li><strong>Head-to-head</strong> - Hasil pertemuan langsung tim yang seri (jika pernah bertemu).</li>
              <li><strong>Keputusan Juri</strong> - Juri utama memutuskan peringkat tim yang seri.</li>
            </ul>
          </div>
        </div>
      </div>
      
      <h3 class="text-xl font-semibold mb-3">Contoh Kasus</h3>
      
      <div class="space-y-6 mb-8">
        <div class="bg-gray-50 p-5 rounded-lg border">
          <h4 class="font-semibold text-lg mb-3">Contoh Pembagian Rata VP</h4>
          <p class="italic text-gray-600 mb-4">{contohPerhitunganVPDenganSeri.description}</p>
          
          <table class="min-w-full border">
            <thead>
              <tr class="bg-gray-100">
                <th class="py-2 px-4 border">Posisi</th>
                <th class="py-2 px-4 border">Tim</th>
                <th class="py-2 px-4 border">Skor Tim</th>
                <th class="py-2 px-4 border">Peringkat</th>
                <th class="py-2 px-4 border">Victory Points</th>
              </tr>
            </thead>
            <tbody>
              {contohPerhitunganVPDenganSeri.teams.map((tim, index) => (
                <tr class={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                  <td class="py-2 px-4 border">{tim.position}</td>
                  <td class="py-2 px-4 border font-medium">{tim.teamName}</td>
                  <td class="py-2 px-4 border">{tim.teamScore}</td>
                  <td class="py-2 px-4 border">
                    <span class={tim.rank === "1-2" ? "bg-purple-100 text-purple-800 px-2 py-1 rounded" : ""}>
                      {tim.rank}
                    </span>
                  </td>
                  <td class="py-2 px-4 border font-bold">{tim.vp}</td>
                </tr>
              ))}
            </tbody>
          </table>
          
          <div class="mt-4 text-sm">
            <strong>Penjelasan:</strong> Tim OG dan OO memiliki skor sama (76.0), sehingga mereka berbagi peringkat 1-2. VP dihitung sebagai rata-rata dari peringkat 1 dan 2, yaitu (3+2)/2 = 2.5 VP untuk masing-masing tim.
          </div>
        </div>
        
        <div class="bg-gray-50 p-5 rounded-lg border">
          <h4 class="font-semibold text-lg mb-3">Contoh Tie-breaker</h4>
          <p class="italic text-gray-600 mb-4">{contohPerhitunganVPDenganTiebreaker.description}</p>
          
          <table class="min-w-full border">
            <thead>
              <tr class="bg-gray-100">
                <th class="py-2 px-4 border">Posisi</th>
                <th class="py-2 px-4 border">Tim</th>
                <th class="py-2 px-4 border">Skor Tim</th>
                <th class="py-2 px-4 border">Skor Pembicara</th>
                <th class="py-2 px-4 border">Peringkat</th>
                <th class="py-2 px-4 border">Victory Points</th>
              </tr>
            </thead>
            <tbody>
              {contohPerhitunganVPDenganTiebreaker.teams.map((tim, index) => (
                <tr class={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                  <td class="py-2 px-4 border">{tim.position}</td>
                  <td class="py-2 px-4 border font-medium">{tim.teamName}</td>
                  <td class="py-2 px-4 border">{tim.teamScore}</td>
                  <td class="py-2 px-4 border">
                    {tim.speakers && (
                      <div class="space-y-1 text-sm">
                        {tim.speakers.map((speaker, idx) => (
                          <div>
                            {speaker.name}: <span class="font-medium">{speaker.score}</span>
                          </div>
                        ))}
                        {tim.highestSpeakerScore && (
                          <div class="text-green-700 font-medium">
                            Max: {tim.highestSpeakerScore}
                          </div>
                        )}
                      </div>
                    )}
                  </td>
                  <td class="py-2 px-4 border">{tim.rank}</td>
                  <td class="py-2 px-4 border font-bold">{tim.vp}</td>
                </tr>
              ))}
            </tbody>
          </table>
          
          <div class="mt-4 text-sm">
            <strong>Penjelasan:</strong> Tim OG dan OO memiliki skor tim yang sama (76.0), tetapi tim OG memiliki skor pembicara tertinggi (77) yang lebih tinggi dari tim OO (76). Dengan metode tie-breaker, tim OG mendapat peringkat 1 (3 VP) dan tim OO mendapat peringkat 2 (2 VP).
          </div>
        </div>
      </div>
      
      <div class="bg-yellow-50 p-4 rounded-lg border border-yellow-200">
        <h3 class="font-semibold mb-2">Pertimbangan Memilih Metode Penanganan Seri</h3>
        <ul class="list-disc pl-5 space-y-2">
          <li>
            <strong>Pembagian Rata (Split VP)</strong>
            <div class="text-sm ml-5 mt-1">
              <p class="text-gray-700">✓ Adil secara matematis</p>
              <p class="text-gray-700">✓ Sederhana dan transparan</p>
              <p class="text-gray-700">✗ Bisa menghasilkan VP desimal (2.5, 1.5, dll)</p>
              <p class="text-gray-700">✗ Mungkin menyulitkan dalam penentuan break (tim yang lolos ke ronde berikutnya)</p>
            </div>
          </li>
          <li>
            <strong>Tie-breaker</strong>
            <div class="text-sm ml-5 mt-1">
              <p class="text-gray-700">✓ Selalu menghasilkan peringkat yang jelas</p>
              <p class="text-gray-700">✓ VP selalu berupa bilangan bulat (3, 2, 1, 0)</p>
              <p class="text-gray-700">✗ Bisa dianggap kurang adil jika selisih skor pembicara sangat kecil</p>
              <p class="text-gray-700">✗ Memerlukan aturan tie-breaker yang jelas dan konsisten</p>
            </div>
          </li>
        </ul>
        
        <div class="mt-4">
          <p class="font-medium">Rekomendasi:</p>
          <p class="text-sm">
            Sebaiknya aturan penanganan seri diumumkan sebelum kompetisi dimulai, sehingga semua peserta memahami sistem yang digunakan. Metode yang digunakan harus diterapkan secara konsisten di seluruh ronde kompetisi.
          </p>
        </div>
      </div>
    </div>
    
    <div class="mb-8">
      <PerhitunganVPSeri client:load />
    </div>
    
    <div class="bg-white p-6 rounded-lg shadow">
      <h2 class="text-2xl font-bold mb-4">Implementasi Penanganan Seri dalam Tabulator</h2>
      
      <p class="mb-6">
        Dalam aplikasi tabulator debat, perhitungan Victory Points perlu mengimplementasikan penanganan kasus seri. Berikut adalah contoh kode untuk menangani kasus seri dalam perhitungan VP:
      </p>
      
      <div class="bg-gray-900 p-4 rounded text-white text-sm font-mono overflow-x-auto mb-6">
        <pre>
// Perhitungan Victory Points dengan penanganan seri
export const tentukanVictoryPoints = (timArray, options = { tieHandling: 'split' }) => {
  const { tieHandling } = options;
  
  // Mengurutkan tim berdasarkan skor
  const timTerurut = [...timArray].sort((a, b) => b.skorTim - a.skorTim);
  
  // Mapping VP berdasarkan peringkat (1-based index)
  const vpMapping = { 1: 3, 2: 2, 3: 1, 4: 0 };
  
  // Array untuk hasil final
  const hasilFinal = [];
  
  // Temp array untuk menyimpan tim dengan skor sama
  let timSekor = [];
  let peringkatSaatIni = 1;
  
  // Proses setiap tim dalam urutan berdasarkan skor
  for (let i = 0; i < timTerurut.length; i++) {
    // Tambahkan tim saat ini ke grup timSekor
    timSekor.push(timTerurut[i]);
    
    // Jika ini tim terakhir atau tim berikutnya memiliki skor berbeda
    if (i === timTerurut.length - 1 || timTerurut[i].skorTim !== timTerurut[i + 1].skorTim) {
      // Peringkat untuk semua tim dalam grup seri ini
      const jumlahTimSeri = timSekor.length;
      
      if (jumlahTimSeri === 1) {
        // Jika hanya satu tim (tidak seri)
        const tim = timSekor[0];
        hasilFinal.push({
          ...tim,
          peringkat: peringkatSaatIni,
          vp: vpMapping[peringkatSaatIni] || 0
        });
      } else if (tieHandling === 'split') {
        // Jika beberapa tim seri, bagi rata VP
        // Contoh: Peringkat 1-2 mendapat (3+2)/2 = 2.5 VP masing-masing
        const totalVP = Array.from(
          { length: jumlahTimSeri }, 
          (_, idx) => vpMapping[peringkatSaatIni + idx] || 0
        ).reduce((sum, vp) => sum + vp, 0);
        
        const vpPerTim = totalVP / jumlahTimSeri;
        
        // Peringkat untuk ditampilkan: "1-2", "3-4", dst
        const peringkatDisplay = `${peringkatSaatIni}-${peringkatSaatIni + jumlahTimSeri - 1}`;
        
        // Tambahkan setiap tim dengan VP yang sama
        timSekor.forEach(tim => {
          hasilFinal.push({
            ...tim,
            peringkat: peringkatDisplay,
            statusSeri: true,
            vp: vpPerTim
          });
        });
      } else if (tieHandling === 'tiebreaker') {
        // Gunakan tiebreaker - misalnya skor pembicara tertinggi
        const timDenganTiebreaker = timSekor.map(tim => {
          // Temukan skor pembicara tertinggi untuk masing-masing tim
          const skorPembicaraTertinggi = Math.max(...tim.pembicara.map(p => p.skor));
          return { ...tim, skorTiebreaker: skorPembicaraTertinggi };
        });
        
        // Urutkan tim berdasarkan tiebreaker
        timDenganTiebreaker.sort((a, b) => b.skorTiebreaker - a.skorTiebreaker);
        
        // Tentukan VP berdasarkan urutan tiebreaker
        timDenganTiebreaker.forEach((tim, idx) => {
          const peringkatTiebreaker = peringkatSaatIni + idx;
          hasilFinal.push({
            ...tim,
            peringkat: peringkatTiebreaker,
            statusSeri: true,
            vp: vpMapping[peringkatTiebreaker] || 0
          });
        });
      }
      
      // Update peringkat untuk grup berikutnya
      peringkatSaatIni += jumlahTimSeri;
      
      // Reset grup tim sekor
      timSekor = [];
    }
  }
  
  return hasilFinal;
};
        </pre>
      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
        <div>
          <h3 class="text-xl font-semibold mb-3">Contoh Penggunaan: Split VP</h3>
          <div class="bg-gray-800 p-4 rounded text-white text-sm font-mono overflow-x-auto">
            <pre>
// Contoh data tim
const timArray = [
  {
    posisi: "OG",
    namaTim: "UCDS",
    skorTim: 76.0,
    // ...
  },
  {
    posisi: "OO",
    namaTim: "Marjorie",
    skorTim: 76.0,
    // ...
  },
  // ...
];

// Hitung VP dengan metode pembagian rata
const hasil = tentukanVictoryPoints(
  timArray, 
  { tieHandling: 'split' }
);

// Hasil:
// UCDS: peringkat "1-2", vp: 2.5
// Marjorie: peringkat "1-2", vp: 2.5
// ...
            </pre>
          </div>
        </div>
        
        <div>
          <h3 class="text-xl font-semibold mb-3">Contoh Penggunaan: Tie-breaker</h3>
          <div class="bg-gray-800 p-4 rounded text-white text-sm font-mono overflow-x-auto">
            <pre>
// Contoh data tim
const timArray = [
  {
    posisi: "OG",
    namaTim: "UCDS",
    skorTim: 76.0,
    pembicara: [
      { nama: "Candra", skor: 77 },
      { nama: "Steven", skor: 75 }
    ],
    // ...
  },
  {
    posisi: "OO",
    namaTim: "Marjorie",
    skorTim: 76.0,
    pembicara: [
      { nama: "Putriku", skor: 76 },
      { nama: "Mayritza", skor: 76 }
    ],
    // ...
  },
  // ...
];

// Hitung VP dengan metode tie-breaker
const hasil = tentukanVictoryPoints(
  timArray, 
  { tieHandling: 'tiebreaker' }
);

// Hasil:
// UCDS: peringkat 1, vp: 3
// Marjorie: peringkat 2, vp: 2
// ...
            </pre>
          </div>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>