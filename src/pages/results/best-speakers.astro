---
import BaseLayout from '../../layouts/BaseLayout.astro';

/**
 * Halaman best speaker dengan HTTPS dan multiple endpoint support
 * @author made by Tamaes
 */
let bestSpeakerData = [];
let error = null;
let endpoint = '';

// Multiple API endpoints dengan priority
const getApiEndpoints = () => {
  const hostname = Astro.url.hostname;
  const protocol = Astro.url.protocol;
  
  const endpoints = [];
  
  // Development
  if (hostname === 'localhost' || hostname === '127.0.0.1') {
    endpoints.push('http://localhost:3001/api');
    endpoints.push('http://localhost:3001');
    return endpoints;
  }
  
  // Production - priority order
  if (protocol === 'https:' && hostname === 'debate-tabulator.jawanich.my.id') {
    endpoints.push('https://debate-tabulator.jawanich.my.id/api');
  }
  
  if (hostname === 'debate-tabulator.jawanich.my.id') {
    endpoints.push('http://debate-tabulator.jawanich.my.id:8080/api');
  }
  
  endpoints.push('http://128.199.164.94:8080/api');
  
  return endpoints;
};

// Try multiple endpoints
const endpoints = getApiEndpoints();
for (const apiUrl of endpoints) {
  try {
    endpoint = `${apiUrl}/best-speakers`;
    console.log(`Trying: ${endpoint}`);
    
    const response = await fetch(endpoint);
    const result = await response.json();
    
    if (result.success) {
      bestSpeakerData = result.data;
      break;
    } else {
      throw new Error(result.error || 'API returned error');
    }
  } catch (err) {
    console.warn(`Failed: ${endpoint} - ${err.message}`);
    if (endpoints.indexOf(apiUrl) === endpoints.length - 1) {
      error = err.message;
    }
    continue;
  }
}

const isSecure = Astro.url.protocol === 'https:';
---

<BaseLayout title="Best Speaker">
  <div class="bg-white p-6 rounded-lg shadow mb-8">
    <div class="flex justify-between items-center mb-4">
      <h2 class="text-2xl font-bold">üèÜ Best Speaker Rankings</h2>
      <div class="flex gap-2">
        <button 
          onclick="window.location.reload()" 
          class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition"
        >
          üîÑ Refresh
        </button>
        <a 
          href="/input" 
          class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition"
        >
          ‚ûï Input Data
        </a>
      </div>
    </div>
    
    <div class={`mb-4 p-3 rounded border ${isSecure ? 'bg-green-50 border-green-200' : 'bg-blue-50 border-blue-200'}`}>
      <p class={`text-sm ${isSecure ? 'text-green-800' : 'text-blue-800'}`}>
        {isSecure ? 'üîí Secure HTTPS Connection' : 'üåê HTTP Connection'} ‚Ä¢ 
        {bestSpeakerData.length > 0 ? 
          `Data loaded from: ${endpoint}` : 
          `Trying multiple endpoints for reliability`
        }
      </p>
    </div>
    
    {error ? (
      <div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
        <h3 class="text-red-800 font-semibold mb-2">‚ùå Unable to Load Data</h3>
        <p class="text-red-700 mb-3">Error: {error}</p>
        <div class="text-red-600 text-sm">
          <p class="font-medium mb-2">Possible causes:</p>
          <ul class="list-disc pl-5 space-y-1">
            <li>API server not running</li>
            <li>Database connection issues</li>
            <li>Network connectivity problems</li>
            <li>No data available yet</li>
          </ul>
          <p class="mt-3">
            <a href="/input" class="text-red-800 underline font-medium">
              ‚Üí Input data first
            </a> or 
            <button onclick="window.location.reload()" class="text-red-800 underline">
              refresh this page
            </button>
          </p>
        </div>
      </div>
    ) : bestSpeakerData.length === 0 ? (
      <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
        <h3 class="text-yellow-800 font-semibold mb-2">üì≠ No Best Speaker Data</h3>
        <p class="text-yellow-700 mb-3">Database connected but no speaker data available yet.</p>
        <a 
          href="/input" 
          class="inline-block bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition font-medium"
        >
          üöÄ Input First Round Data
        </a>
      </div>
    ) : (
      <>
        <p class="mb-6">
          Real-time best speaker rankings based on cumulative scores from all rounds.
          Data sourced from <strong>MongoDB Atlas</strong> production database.
        </p>
        
        <div class="overflow-x-auto">
          <table class="min-w-full bg-white border">
            <thead>
              <tr class="bg-gray-100">
                <th class="py-3 px-4 border text-left">Rank</th>
                <th class="py-3 px-4 border text-left">Name</th>
                <th class="py-3 px-4 border text-left">Team</th>
                <th class="py-3 px-4 border text-left">University</th>
                <th class="py-3 px-4 border text-left">Total Score</th>
                <th class="py-3 px-4 border text-left">Average</th>
                <th class="py-3 px-4 border text-left">Rounds</th>
              </tr>
            </thead>
            <tbody>
              {bestSpeakerData.map((speaker, index) => (
                <tr key={speaker._id} class={`${index % 2 === 0 ? 'bg-gray-50' : 'bg-white'} hover:bg-blue-50 transition`}>
                  <td class="py-3 px-4 border">
                    <span class={`
                      inline-flex items-center justify-center w-8 h-8 rounded-full font-bold
                      ${index === 0 ? 'bg-yellow-400 text-yellow-900 shadow-lg' : 
                        index === 1 ? 'bg-gray-400 text-white shadow-md' : 
                        index === 2 ? 'bg-amber-600 text-white shadow-md' : 
                        'bg-gray-200 text-gray-700'}
                    `}>
                      {speaker.rank}
                    </span>
                  </td>
                  <td class="py-3 px-4 border font-medium">{speaker.name}</td>
                  <td class="py-3 px-4 border">{speaker.team}</td>
                  <td class="py-3 px-4 border text-sm">{speaker.university}</td>
                  <td class="py-3 px-4 border font-bold text-lg text-green-600">{speaker.totalScore}</td>
                  <td class="py-3 px-4 border font-medium">{speaker.averageScore}</td>
                  <td class="py-3 px-4 border text-center">
                    <span class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">
                      {speaker.roundsCount}
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        
        {/* Top 3 Podium */}
        {bestSpeakerData.length >= 3 && (
          <div class="mt-12">
            <h3 class="text-xl font-semibold mb-6 text-center">ü•á Podium Best Speaker</h3>
            
            <div class="flex justify-center items-end space-x-8">
              <!-- Second Place -->
              <div class="flex flex-col items-center">
                <div class="text-center mb-4">
                  <div class="text-lg font-bold">{bestSpeakerData[1].name}</div>
                  <div class="text-sm text-gray-600">{bestSpeakerData[1].team}</div>
                  <div class="text-xs text-gray-500">{bestSpeakerData[1].university}</div>
                </div>
                <div class="w-24 h-24 rounded-full bg-gray-300 flex items-center justify-center mb-4 shadow-lg">
                  <span class="text-gray-700 text-xl">ü•à</span>
                </div>
                <div class="w-32 bg-gray-400 h-48 flex flex-col items-center justify-center text-white rounded-t-lg shadow-lg">
                  <div class="text-2xl font-bold">{bestSpeakerData[1].totalScore}</div>
                  <div class="text-sm">Total Score</div>
                </div>
                <div class="bg-gray-200 w-32 py-3 text-center rounded-b-lg">
                  <div class="font-medium">Runner Up</div>
                  <div class="text-xs text-gray-600">Avg: {bestSpeakerData[1].averageScore}</div>
                </div>
              </div>
              
              <!-- First Place -->
              <div class="flex flex-col items-center">
                <div class="text-center mb-4">
                  <div class="text-lg font-bold">{bestSpeakerData[0].name}</div>
                  <div class="text-sm text-gray-600">{bestSpeakerData[0].team}</div>
                  <div class="text-xs text-gray-500">{bestSpeakerData[0].university}</div>
                </div>
                <div class="w-32 h-32 rounded-full bg-yellow-200 border-4 border-yellow-400 flex items-center justify-center mb-4 shadow-xl">
                  <span class="text-yellow-800 text-3xl">üèÜ</span>
                </div>
                <div class="w-32 bg-yellow-500 h-64 flex flex-col items-center justify-center text-white rounded-t-lg shadow-xl">
                  <div class="text-3xl font-bold">{bestSpeakerData[0].totalScore}</div>
                  <div class="text-sm">Total Score</div>
                </div>
                <div class="bg-yellow-200 w-32 py-3 text-center rounded-b-lg">
                  <div class="font-bold text-yellow-800">ü•á BEST SPEAKER</div>
                  <div class="text-xs text-yellow-700">Avg: {bestSpeakerData[0].averageScore}</div>
                </div>
              </div>
              
              <!-- Third Place -->
              <div class="flex flex-col items-center">
                <div class="text-center mb-4">
                  <div class="text-lg font-bold">{bestSpeakerData[2].name}</div>
                  <div class="text-sm text-gray-600">{bestSpeakerData[2].team}</div>
                  <div class="text-xs text-gray-500">{bestSpeakerData[2].university}</div>
                </div>
                <div class="w-20 h-20 rounded-full bg-orange-200 flex items-center justify-center mb-4 shadow-md">
                  <span class="text-orange-700 text-lg">ü•â</span>
                </div>
                <div class="w-32 bg-orange-400 h-36 flex flex-col items-center justify-center text-white rounded-t-lg shadow-lg">
                  <div class="text-2xl font-bold">{bestSpeakerData[2].totalScore}</div>
                  <div class="text-sm">Total Score</div>
                </div>
                <div class="bg-orange-200 w-32 py-3 text-center rounded-b-lg">
                  <div class="font-medium">Third Place</div>
                  <div class="text-xs text-orange-700">Avg: {bestSpeakerData[2].averageScore}</div>
                </div>
              </div>
            </div>
          </div>
        )}
      </>
    )}
  </div>
  
  <!-- System Info -->
  <div class="bg-blue-50 p-4 rounded-lg border border-blue-200">
    <h3 class="font-semibold mb-2">üîó Production System:</h3>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
      <ul class="list-disc pl-5 space-y-1">
        <li>Database: <strong>MongoDB Atlas (Production)</strong></li>
        <li>Security: <strong>{isSecure ? 'HTTPS/SSL Enabled' : 'HTTP Connection'}</strong></li>
        <li>Reliability: <strong>Multiple endpoint fallback</strong></li>
        <li>Real-time: <strong>Auto-update on new data</strong></li>
      </ul>
      <ul class="list-disc pl-5 space-y-1">
        <li>Total scores from all participated rounds</li>
        <li>Average calculated automatically</li>
        <li>Sorted by total score (highest first)</li>
        <li>Updated: <strong>{new Date().toLocaleString()}</strong></li>
      </ul>
    </div>
  </div>
</BaseLayout>

<script is:inline>
  // Enhanced console logging
  console.log('üèÜ Best Speakers Page Loaded');
  console.log('üîí Security:', window.location.protocol);
  console.log('üåê Domain:', window.location.hostname);
  
  // Add connection info to page
  const isSecure = window.location.protocol === 'https:';
  if (isSecure) {
    console.log('‚úÖ Secure HTTPS connection established');
  } else {
    console.log('‚ÑπÔ∏è HTTP connection (consider using HTTPS for production)');
  }
</script>
